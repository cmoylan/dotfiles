#+TITLE: Doom Emacs configuration
#+VERSION: 1.0
#+PROPERTY: header-args :results silent
# +SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Table of Contents :TOC_3_gh:
- [[#tasks][Tasks]]
- [[#configuration][Configuration]]
  - [[#general][General]]
    - [[#setq][setq]]
  - [[#hotkeys][Hotkeys]]
  - [[#org-mode][Org mode]]
    - [[#roam][Roam]]
    - [[#journal][Journal]]
  - [[#slyslime][Sly/Slime]]
  - [[#treemacs][Treemacs]]
  - [[#web-mode][Web-mode]]
  - [[#golang][Golang]]
  - [[#custom-key-chords][Custom key chords]]
  - [[#ruby][Ruby]]
  - [[#rubocop][Rubocop]]
  - [[#custom-packages][Custom packages]]
  - [[#external-hooks][External hooks]]
- [[#meta][Meta]]

* Tasks

* Configuration
** General
    Set the default theme
    #+BEGIN_SRC emacs-lisp
    (setq doom-theme 'doom-snazzy)
    #+END_SRC

    Set the font size
    #+BEGIN_SRC emacs-lisp
    (if (string-equal system-type "gnu/linux")
        (set-face-attribute 'default nil :height 120)
      (set-face-attribute 'default nil :height 130))
    #+END_SRC
*** setq
If you use setq in your init file, to change the value of such an option, the setter function will not run. To set such an option correctly with Elisp, you need to use the function customize-set-variable. Alternatively, people use various versions of csetq macros in their configs to automatically take care of this (you can use GitHub code search to discover more sophisticated variants if you like):
#+BEGIN_SRC emacs-lisp
(defmacro csetq (sym val)
  `(funcall (or (get ',sym 'custom-set) 'set-default) ',sym ,val))
#+END_SRC
If you are using the use-package macro, the :custom keyword will handle this for you.
** Hotkeys
- search at point
    #+BEGIN_SRC
      (global-set-key (kbd "C-*") 'evil-search-symbol-forward)
      (global-set-key (kbd "C-#") 'evil-search-symbol-backward)
    #+END_SRC
** Org mode
    Record the timestamp when a TODO item was completed
    #+BEGIN_SRC emacs-lisp
    (csetq org-log-done t)
    (csetq org-directory "~/Dropbox/org")
    #+END_SRC

*** Roam
    Set the org directory and general options
    #+BEGIN_SRC emacs-lisp
    (csetq org-roam-directory "~/Dropbox/org")
    (csetq org-roam-completion-system 'ivy)
    (add-hook 'after-init-hook 'org-roam-mode)
    #+END_SRC


    Shortcuts
    #+BEGIN_SRC emacs-lisp
    (after! org-roam
            (map! :leader
                :prefix "n"
                :desc "org-roam" "l" #'org-roam
                :desc "org-roam-insert" "i" #'org-roam-insert
                :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
                :desc "org-roam-find-file" "f" #'org-roam-find-file
                :desc "org-roam-show-graph" "g" #'org-roam-show-graph
                :desc "org-roam-insert" "i" #'org-roam-insert
                :desc "org-roam-capture" "c" #'org-roam-capture ))
    #+END_SRC

*** Journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir org-roam-directory)
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)
#+END_SRC

** Sly/Slime
    Use quicklisp
    #+BEGIN_SRC emacs-lisp
    (if (file-directory-p "~/quicklisp")
        (progn
          (load (expand-file-name "~/quicklisp/slime-helper.el"))
          (setq inferior-lisp-program "sbcl")
          (load "~/quicklisp/clhs-use-local.el" t)))
    #+END_SRC

** Treemacs
    Use the fancy icons in ~dired~ mode
    #+BEGIN_SRC emacs-lisp
    (after! treemacs-icons-dired
      (treemacs-icons-dired-mode))
    #+END_SRC

** Web-mode
    Set indentation to 2 spaces
    #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :mode "\\.erb\\'")
    (add-hook! web-mode
               (setq web-mode-markup-indent-offset 2)
               (setq web-mode-css-indent-offset 2)
               (setq web-mode-code-indent-offset 2))
    #+END_SRC

** Golang
    Add the go bin directory to emacs executable path
    #+BEGIN_SRC emacs-lisp
    ; TODO put this behind a flag
    ;(setenv "PATH" (concat (getenv "PATH") ":~/go/bin"))
    ;(setq exec-path (append exec-path '("~/go/bin")))
    #+END_SRC emacs-lisp

** Custom key chords
    Will become a standalong package
    #+BEGIN_SRC emacs-lisp
    (defun hh/toggle-debugger (name)
      "Toggles a debugging statement depending on language."
      (interactive "p")

      (message "this goes to *Messages*")

      (let (message-log-max) ; minibuffer only, don't log to *Messages*
        (message "Debugger toggled"))
    )
    ;(map! :leader
    ;  (:prefix-map ("a" . "applications")
    ;   (:prefix ("j" . "journal")
    ;    :desc "New journal entry" "j" #'hh/toggle-debugger)))
    #+END_SRC

** Ruby
    Set up ruby packages
    #+BEGIN_SRC emacs-lisp
    ;(require 'chruby)
    ;(chruby "ruby-2.7.4")
    ;(use-package enh-ruby-mode
    ;  :ensure t
    ;  :defer t
    ;  :config
    ;  (setq enh-ruby-deep-indent-paren nil)
    ;  (setq enh-ruby-add-encoding-comment-on-save nil)
    ;  :mode (("\\.rb\\'" . enh-ruby-mode)
    ;         ("\\.ru\\'" . enh-ruby-mode)
    ;         ("\\.gemspec\\'" . enh-ruby-mode)
    ;         ("Rakefile\\'" . enh-ruby-mode)
    ;         ("Gemfile\\'" . enh-ruby-mode)
    ;         ("Capfile\\'" . enh-ruby-mode)
    ;         ("Guardfile\\'" . enh-ruby-mode)))
    #+END_SRC
** Rubocop
    Use bundler
    #+BEGIN_SRC emacs-lisp
    ;(setq flycheck-command-wrapper-function
    ;      (lambda (command)
    ;        (append '("bundle" "exec") command)))
    #+END_SRC

** Custom packages
Add custom packages to load path.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.doom.d/lisp/")
; add descendant directories
(let ((default-directory  "~/.doom.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** External hooks
#+BEGIN_SRC emacs-lisp
(defun tt-get-heading-info ()
  "show org-heading-components result"
  (interactive)
  (let ((x (org-heading-components)))
    (with-output-to-temp-buffer "*xah temp out*"
      (print x))))

(defun tt-show-all-prop-keys ()
  "show all properties in buffer 2019-01-18"
  (interactive)
  (let ((x (org-buffer-property-keys )))
    (with-output-to-temp-buffer "*xah temp out*"
      (print x))))

(defun work/log-ticket (number description)
  (interactive)
  (message (number-to-string number))
  (message description)
  ; add a line under Task heading on work.org
  ;(with-current-buffer "work.org"
  ;  (org-element-parse-buffer))
  ; add a line under Task heading on work.org
  ;
  ; (write-region <STRING> nil <FILENAME> 'append)
  )

(defun bujo/finalize-month ()
  (interactive)
  (let* ((filename (downcase (format-time-string "%B-%Y.org")))
         (filepath (concat (file-name-as-directory org-directory) filename))
         (next-filename)
         (next-filepath))
    (setq next-filename (read-string "Enter next month's file name: " filename))
    (setq next-filepath (concat (file-name-as-directory org-directory) next-filename))

    (if (file-exists-p next-filepath)
        (progn
          (message "file already exists")
          (user-error "file already exists")))

    (with-temp-file next-filepath "almost works")

    ; copy a template over
    (message "got to the end")
     )
  )
#+END_SRC

* Meta
  Evaluate code blocks with: =<C-c><C-e>=

  Compile this file as HTML with: =<C-c><C-e> h h=

  Eval buffer with : SPC m e b
